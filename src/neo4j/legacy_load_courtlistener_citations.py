#!/usr/bin/env python3
"""
Script to load CourtListener citation data into Neo4j using the neomodel loader.

This script:
1. Loads the citation map CSV file generated by query_insert_citation_map.sh
2. Uses the neomodel loader to create Opinion nodes and citation relationships
3. Reports statistics about the loaded data
"""

import asyncio
import logging
import os
from typing import List, Tuple
import csv
from datetime import datetime

from neomodel_loader import NeomodelLoader

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def load_citation_map(
    loader: NeomodelLoader, citation_map_file: str, batch_size: int = 10000
) -> None:
    """
    Load the citation map CSV file into Neo4j.

    Args:
        loader: Initialized NeomodelLoader instance
        citation_map_file: Path to the citation map CSV file
        batch_size: How many citations to process in each batch
    """
    if not os.path.exists(citation_map_file):
        raise FileNotFoundError(f"Citation map file not found: {citation_map_file}")

    # Read citation pairs from CSV
    citation_pairs: List[Tuple[int, int]] = []
    with open(citation_map_file, "r") as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                # TODO:

                citing_id = int(row["citing_cluster_id"])
                cited_id = int(row["cited_cluster_id"])
                citation_pairs.append((citing_id, cited_id))
            except (KeyError, ValueError) as e:
                logger.error(f"Error parsing row {row}: {str(e)}")
                continue

    logger.info(f"Loaded {len(citation_pairs)} citation pairs from CSV")

    # Process citations in batches
    await loader.load_basic_citations(
        citation_pairs, source="courtlistener", batch_size=batch_size
    )

    # Get final statistics
    stats = loader.get_statistics()
    logger.info("Final database statistics:")
    logger.info(f"Total nodes: {sum(item['count'] for item in stats['node_counts'])}")
    logger.info(f"Total citations: {stats['citation_count']}")
    logger.info(f"Unique citing opinions: {stats['citing_nodes']}")
    logger.info(f"Unique cited opinions: {stats['cited_nodes']}")


async def main():
    # Configuration
    NEO4J_URI = os.getenv("NEO4J_URI", "localhost:7687")
    NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")
    NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "courtlistener")
    CITATION_MAP_FILE = os.getenv("CITATION_MAP_FILE", "cl_citation_map.csv")
    BATCH_SIZE = int(os.getenv("BATCH_SIZE", "10000"))

    # Initialize loader
    loader = NeomodelLoader(
        NEO4J_URI,
        NEO4J_USER,
        NEO4J_PASSWORD,
        database="courtlistener",
        batch_size=10000,
    )

    try:
        # Load citation map
        start_time = datetime.now()
        logger.info(f"Starting citation map load at {start_time}")

        await load_citation_map(loader, CITATION_MAP_FILE, BATCH_SIZE)

        end_time = datetime.now()
        duration = end_time - start_time
        logger.info(f"Completed citation map load in {duration}")

    except Exception as e:
        logger.error(f"Error during citation map load: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
